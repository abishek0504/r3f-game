/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/environment/crate.glb -o src/components/models/Crate.jsx -r public
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'

export function Crate(props) {
  const { nodes, materials } = useGLTF('/models/environment/crate.glb')
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={1}>
        <mesh geometry={nodes.Crate_1.geometry} material={materials.DarkWood} castShadow receiveShadow />
        <mesh geometry={nodes.Crate_2.geometry} material={materials.Wood} castShadow receiveShadow />
      </group>
    </group>
  )
}

// Create a component for a single crate that can be placed individually
export function CrateInstance({ position = [0, 0, 0], rotation = [0, 0, 0], scale = 1 }) {
  const groupRef = useRef();
  
  // Use a ref to adjust the position after the component mounts
  React.useEffect(() => {
    if (groupRef.current) {
      // Adjust the position to center the crate in the collider
      groupRef.current.position.y = -0.5;
    }
  }, []);
  
  return (
    <group position={position} rotation={rotation}>
      <group ref={groupRef}>
        <Crate scale={scale} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/environment/crate.glb')
